// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace USAble_Data
{
    public partial class _DBContext : DbContext
    {
        public _DBContext()
        {
        }

        public _DBContext(DbContextOptions<_DBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Discounts> Discounts { get; set; }
        public virtual DbSet<MenuItemCategories> MenuItemCategories { get; set; }
        public virtual DbSet<MenuItems> MenuItems { get; set; }
        public virtual DbSet<OrderMenuItems> OrderMenuItems { get; set; }
        public virtual DbSet<OrderTaxes> OrderTaxes { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Taxes> Taxes { get; set; }
        public virtual DbSet<UserPasswords> UserPasswords { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=USAble_DB;Integrated Security=true");

            modelBuilder.Entity<Discounts>(entity =>
            {
                entity.HasIndex(e => e.Name, "IX_Discounts_Name")
                    .IsUnique();

                entity.Property(e => e.Amount).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DiscountsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.DiscountsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy);
            });

            modelBuilder.Entity<MenuItemCategories>(entity =>
            {
                entity.HasIndex(e => e.Name, "IX_MenuItemCategories_Name")
                    .IsUnique();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.MenuItemCategoriesCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.MenuItemCategoriesModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy);
            });

            modelBuilder.Entity<MenuItems>(entity =>
            {
                entity.HasIndex(e => e.Name, "IX_MenuItems_Name")
                    .IsUnique();

                entity.Property(e => e.Cost).HasColumnType("smallmoney");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.MenuItemsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.MenuItemCategory)
                    .WithMany(p => p.MenuItems)
                    .HasForeignKey(d => d.MenuItemCategoryId);

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.MenuItemsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy);
            });

            modelBuilder.Entity<OrderMenuItems>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.MenuItemId });

                entity.HasOne(d => d.MenuItem)
                    .WithMany(p => p.OrderMenuItems)
                    .HasForeignKey(d => d.MenuItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderMenuItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<OrderTaxes>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.TaxId });

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderTaxes)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.OrderTaxes)
                    .HasForeignKey(d => d.TaxId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.DiscountId);
            });

            modelBuilder.Entity<Taxes>(entity =>
            {
                entity.HasIndex(e => e.Name, "IX_Taxes_Name")
                    .IsUnique();

                entity.Property(e => e.Amount).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.TaxesCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.TaxesModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy);
            });

            modelBuilder.Entity<UserPasswords>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(72);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserPasswords)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<UserRoles>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasIndex(e => e.Username, "IX_Users_Username")
                    .IsUnique();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.InverseCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy);

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.InverseModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy);

                entity.HasOne(d => d.UserRole)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.UserRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}